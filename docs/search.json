[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/ggplot2-tutorial/index.html",
    "href": "posts/ggplot2-tutorial/index.html",
    "title": "Tutorial: Simple Plots in R With {ggplot2}",
    "section": "",
    "text": "In this tutorial, we’ll explore how to create basic plots in R using the powerful ggplot2 package. We’ll start by generating a dataset, then we’ll create and explain some boxplots, violin plots, a simple scatterplot, and then we’ll enhance the scatterplot with a regression line and confidence intervals."
  },
  {
    "objectID": "posts/ggplot2-tutorial/index.html#introduction",
    "href": "posts/ggplot2-tutorial/index.html#introduction",
    "title": "Tutorial: Simple Plots in R With {ggplot2}",
    "section": "",
    "text": "In this tutorial, we’ll explore how to create basic plots in R using the powerful ggplot2 package. We’ll start by generating a dataset, then we’ll create and explain some boxplots, violin plots, a simple scatterplot, and then we’ll enhance the scatterplot with a regression line and confidence intervals."
  },
  {
    "objectID": "posts/ggplot2-tutorial/index.html#generating-a-correlated-dataset",
    "href": "posts/ggplot2-tutorial/index.html#generating-a-correlated-dataset",
    "title": "Tutorial: Simple Plots in R With {ggplot2}",
    "section": "Generating a Correlated Dataset",
    "text": "Generating a Correlated Dataset\nWe first need to create a dataset with two variables, X and Y, that exhibit some correlation. We’ll use the tibble package to create this dataset.\n\nlibrary(tibble)\nlibrary(ggplot2)\n\n# Set a random seed for reproducibility\nset.seed(123)\n\n# Generate correlated data\ndata &lt;- tibble(\n  X = rnorm(100, mean = 50, sd = 10),\n  Y = 2 * X + rnorm(100, mean = 0, sd = 20)\n)\n\n# Display the first few rows\nhead(data)\n\n# A tibble: 6 × 2\n      X     Y\n  &lt;dbl&gt; &lt;dbl&gt;\n1  44.4  74.6\n2  47.7 101. \n3  65.6 126. \n4  50.7  94.5\n5  51.3  83.6\n6  67.2 133."
  },
  {
    "objectID": "posts/ggplot2-tutorial/index.html#visualizing-distributions-boxplots-and-violin-plots",
    "href": "posts/ggplot2-tutorial/index.html#visualizing-distributions-boxplots-and-violin-plots",
    "title": "Tutorial: Simple Plots in R With {ggplot2}",
    "section": "Visualizing Distributions: Boxplots and Violin Plots",
    "text": "Visualizing Distributions: Boxplots and Violin Plots\n\nWhat Are Boxplots?\nBoxplots are useful for visualizing the distribution of a numeric variable. They display the median, quartiles, and potential outliers, providing a concise summary of the data.\n\n\nVisualizing X with a Boxplot\n\n# Boxplot of X\nggplot(data, aes(x = \"\", y = X)) +\n  geom_boxplot(fill = \"lightblue\", color = \"blue\") +\n  labs(\n    title = \"Boxplot of X\",\n    x = \"\",\n    y = \"X Variable\"\n  )\n\n\n\n\nBoxplot showing the distribution of X.\n\n\n\n\nCode explanation:\n\nggplot(data, aes(x = \"\", y = X)): Initializes the plot using the dataset data.\n\nThe empty string \"\" on the x-axis groups all values into a single boxplot.\ny = X maps the X variable to the y-axis.\n\ngeom_boxplot(fill = \"lightblue\", color = \"blue\"): Adds the boxplot layer.\n\nfill = \"lightblue\": Sets the interior color of the boxplot to light blue.\ncolor = \"blue\": Sets the outline color of the boxplot to blue.\n\nlabs(): Customizes the plot labels:\n\ntitle: Sets the title of the plot, describing the visualization as a boxplot of X.\nx: Removes the x-axis label since the x-axis is not meaningful in this case.\ny: Labels the y-axis as “X Variable”.\n\n\n\n\nVisualizing Y with a Boxplot\nLet’s use a boxplot to visualize the distribution of Y.\n\n# Boxplot of Y\nggplot(data, aes(x = \"\", y = Y)) +\n  geom_boxplot(fill = \"lightgreen\", color = \"darkgreen\") +\n  labs(\n    title = \"Boxplot of Y\",\n    x = \"\",\n    y = \"Y Variable\"\n  )\n\n\n\n\nBoxplot showing the distribution of Y.\n\n\n\n\n\n\nWhat Are Violin Plots?\nViolin plots are similar to boxplots but provide additional information about the data distribution. They combine a boxplot with a kernel density plot, showing the density of the data at different values.\n\n\nVisualizing X with a Violin Plot\n\n# Violin plot of X\nggplot(data, aes(x = \"\", y = X)) +\n  geom_violin(fill = \"lightblue\", color = \"blue\") +\n  labs(\n    title = \"Violin Plot of X\",\n    x = \"\",\n    y = \"X Variable\"\n  )\n\n\n\n\nViolin plot showing the distribution of X.\n\n\n\n\nCode explanation:\n\nggplot(data, aes(x = \"\", y = X)): Starts the plot using the dataset data.\n\nThe empty string \"\" on the x-axis creates a single group for all X values.\ny = X maps the X variable to the y-axis.\n\ngeom_violin(fill = \"lightblue\", color = \"blue\"): Adds a violin plot layer.\n\nfill = \"lightblue\": Fills the violin plot with light blue to highlight the distribution.\ncolor = \"blue\": Sets the outline color of the violin plot to blue.\n\nlabs(): Provides descriptive labels:\n\ntitle: Specifies the plot title, indicating this is a violin plot of X.\nx: Removes the x-axis label since it has no meaning here.\ny: Labels the y-axis as “X Variable”.\n\n\n\n\nVisualizing Y with a Violin Plot\nLet’s use a violin plot to visualize the distribution of Y.\n\n# Violin plot of Y\nggplot(data, aes(x = \"\", y = Y)) +\n  geom_violin(fill = \"lightgreen\", color = \"darkgreen\") +\n  labs(\n    title = \"Violin Plot of Y\",\n    x = \"\",\n    y = \"Y Variable\"\n  )\n\n\n\n\nViolin plot showing the distribution of Y."
  },
  {
    "objectID": "posts/ggplot2-tutorial/index.html#creating-a-basic-scatterplot-with-geom_point",
    "href": "posts/ggplot2-tutorial/index.html#creating-a-basic-scatterplot-with-geom_point",
    "title": "Tutorial: Simple Plots in R With {ggplot2}",
    "section": "Creating a Basic Scatterplot with geom_point()",
    "text": "Creating a Basic Scatterplot with geom_point()\nScatterplots are a fundamental tool for visualizing the relationship between two continuous variables. Each point represents an observation, with its position determined by the values of the two variables.\nNow, let’s visualize the relationship between X and Y using a scatterplot. We’ll use geom_point() for this purpose.\n\nlibrary(ggplot2)\n\n# Basic scatterplot\nggplot(data, aes(x = X, y = Y)) +\n  geom_point() +\n  labs(\n    title = \"Scatterplot of X vs. Y\",\n    x = \"X Variable\",\n    y = \"Y Variable\"\n  )\n\n\n\n\nScatterplot showing the relationship between X and Y.\n\n\n\n\nCode explanation:\n\nggplot(data, aes(x = X, y = Y)): Creates the base plot, specifying the dataset data and mapping X to the x-axis and Y to the y-axis.\ngeom_point(): Adds a scatterplot layer where each point represents a data observation.\nlabs(): Enhances the plot with labels:\n\ntitle: Sets the main title to “Scatterplot of X vs. Y”.\nx: Labels the x-axis as “X Variable”.\ny: Labels the y-axis as “Y Variable”."
  },
  {
    "objectID": "posts/ggplot2-tutorial/index.html#adding-a-linear-regression-line-with-geom_smooth",
    "href": "posts/ggplot2-tutorial/index.html#adding-a-linear-regression-line-with-geom_smooth",
    "title": "Tutorial: Simple Plots in R With {ggplot2}",
    "section": "Adding a Linear Regression Line with geom_smooth()",
    "text": "Adding a Linear Regression Line with geom_smooth()\nLinear regression is a statistical method for modeling the relationship between two variables. It fits a straight line through the data that minimizes the overall prediction error. This method can be used to determine whether there is a statistically significant association between variables, and it can also be used to predict values of one variable (the response variable, in our case, Y) for unseen values of another (the explanatory variable, in our case, X).\nTo better understand the relationship between X and Y, we’ll add a regression line using geom_smooth() with the lm method.\n\n# Scatterplot with linear regression line\nggplot(data, aes(x = X, y = Y)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE, color = \"blue\", alpha = 0.3, linetype = \"solid\") +\n  labs(\n    title = \"Scatterplot with Regression Line and Confidence Interval\",\n    x = \"X Variable\",\n    y = \"Y Variable\"\n  )\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nScatterplot with a linear regression line.\n\n\n\n\nCode explanation:\n\nggplot(data, aes(x = X, y = Y)): Initializes the plot with the dataset data.\n\nMaps X to the x-axis and Y to the y-axis.\n\ngeom_point(): Adds points to create the scatterplot, showing the relationship between X and Y.\ngeom_smooth(method = \"lm\", se = FALSE, color = \"blue\", linetype = \"solid\"): Adds a regression line to the scatterplot.\n\nmethod = \"lm\": Specifies the use of linear regression to fit the line.\nse = FALSE: Disables the display of the error (confidence interval) band around the regression line.\ncolor = \"blue\": Colors the regression line blue.\nlinetype = \"solid\": Draws the regression line as a solid line.\n\nlabs(): Adds labels:\n\ntitle: Indicates the plot includes a regression line without confidence intervals.\nx: Labels the x-axis as “X Variable”.\ny: Labels the y-axis as “Y Variable”."
  },
  {
    "objectID": "posts/ggplot2-tutorial/index.html#including-a-confidence-interval",
    "href": "posts/ggplot2-tutorial/index.html#including-a-confidence-interval",
    "title": "Tutorial: Simple Plots in R With {ggplot2}",
    "section": "Including a Confidence Interval",
    "text": "Including a Confidence Interval\nFinally, we enhance the plot by including a 95% confidence interval around the regression line. This provides more context about the variability in the predictions.\n\n# Scatterplot with regression line and confidence interval\nggplot(data, aes(x = X, y = Y)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = TRUE, fill = \"red\", color = \"blue\") +\n  labs(\n    title = \"Scatterplot with Regression Line and Confidence Interval\",\n    x = \"X Variable\",\n    y = \"Y Variable\"\n  )\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nScatterplot with a linear regression line and confidence interval.\n\n\n\n\nCode explanation:\n\nggplot(data, aes(x = X, y = Y)): Initializes the plot, mapping X to the x-axis and Y to the y-axis.\ngeom_point(): Adds points for the scatterplot, showing individual observations.\ngeom_smooth(method = \"lm\", se = TRUE, level = 0.95, fill = \"lightblue\", color = \"blue\", alpha = 0.3, linetype = \"solid\"): Adds a regression line and an error (confidence interval) band.\n\nmethod = \"lm\": Uses linear regression to compute the regression line.\nse = TRUE: Displays the confidence interval band around the regression line.\nlevel = 0.95: Sets the confidence level for the error band to 95%.\nfill = \"red\": Colors the confidence interval band red.\ncolor = \"blue\": Colors the regression line blue.\nalpha = 0.3: Makes the confidence interval band slightly transparent.\nlinetype = \"solid\": Specifies a solid line style for the regression line.\n\nlabs(): Customizes the plot labels:\n\ntitle: Indicates the plot includes a regression line with confidence intervals.\nx: Labels the x-axis as “X Variable”.\ny: Labels the y-axis as “Y Variable”."
  },
  {
    "objectID": "posts/ggplot2-tutorial/index.html#conclusion",
    "href": "posts/ggplot2-tutorial/index.html#conclusion",
    "title": "Tutorial: Simple Plots in R With {ggplot2}",
    "section": "Conclusion",
    "text": "Conclusion\nIn this tutorial, we demonstrated some basic plots you can create with ggplot2, a powerful visualization package for R. We saw how we can use R to generate an artificial dataset, then visualize this dataset using boxplots, violin plots, and a scatterplot. Finally, we leanred how enhance our scatterplot with a regression line and confidence intervals. Although these plots are quite basic, the code patterns that underlie them are foundational to creating plots using ggplot2 and are a great foundation for much more complex data visualization in R."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "DSCI 542 Blog - Derek Rodgers",
    "section": "",
    "text": "Tutorial: Simple Plots in R With {ggplot2}\n\n\n\n\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nJan 18, 2025\n\n\nDerek Rodgers\n\n\n\n\n\n\nNo matching items"
  }
]